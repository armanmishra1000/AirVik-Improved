{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
    "name": "User Registration & Email Verification (Newman)",
    "description": "Tests for user registration and email verification endpoints (Modified for Newman)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "token",
      "value": "test-verification-token",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has correct structure\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.eql(true);",
              "    pm.expect(responseJson.data).to.be.an('object');",
              "    pm.expect(responseJson.data.status).to.eql('ok');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/v1/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "health"]
        },
        "description": "Check if the API is healthy"
      }
    },
    {
      "name": "User Registration - Validation Error",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response structure is correct for validation error\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.eql(false);",
              "    pm.expect(responseJson.error).to.be.a('string');",
              "    pm.expect(responseJson.code).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"invalid-email\",\n  \"password\": \"weak\",\n  \"confirmPassword\": \"different\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/register",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "register"]
        },
        "description": "Attempt to register with invalid data"
      }
    },
    {
      "name": "Email Verification - Invalid Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Response structure is correct for invalid token\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.eql(false);",
              "    pm.expect(responseJson.error).to.be.a('string');",
              "    pm.expect(responseJson.code).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"token\": \"invalid-token-123456\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/verify-email",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "verify-email"]
        },
        "description": "Attempt to verify email with invalid token"
      }
    },
    {
      "name": "Resend Verification - Email Not Found",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "pm.test(\"Response structure is correct for email not found\", function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.eql(false);",
              "    pm.expect(responseJson.error).to.be.a('string');",
              "    pm.expect(responseJson.code).to.be.a('string');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"nonexistent@example.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/v1/auth/resend-verification",
          "host": ["{{baseUrl}}"],
          "path": ["api", "v1", "auth", "resend-verification"]
        },
        "description": "Attempt to resend verification to non-existent email"
      }
    }
  ]
}
